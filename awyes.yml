# Roles
pastewin_role:
  get_role:
    client: iam
    depends_on:
      - pastewin_role.create_role
    args:
      RoleName: pastewin
  create_role:
    client: iam
    args:
      RoleName: pastewin
      Description: Role for all pastewin lambdas & dynamo db
      AssumeRolePolicyDocument: >
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": { "Service": "lambda.amazonaws.com" },
            "Action": "sts:AssumeRole"
          }]
        }
  attach_role_policy:
    client: iam
    depends_on:
      - pastewin_role.get_role
    args:
      RoleName: pastewin
      PolicyArn: arn:aws:iam::aws:policy/CloudWatchFullAccess

# # Repos
# coinbase_repo:
#   list_images:
#     client: ecr
#     depends_on:
#       - coinbase_repo.describe_repositories
#       - coinbase_image.push
#     args:
#       repositoryName: coinbase
#       filter:
#         tagStatus: UNTAGGED
#   batch_delete_image:
#     client: ecr
#     depends_on:
#       - coinbase_repo.list_images
#     args:
#       repositoryName: coinbase
#       imageIds: $(coinbase_repo.list_images.imageIds)
#   describe_images:
#     client: ecr
#     depends_on:
#       - coinbase_repo.batch_delete_image
#     args:
#       repositoryName: coinbase
#       filter:
#         tagStatus: TAGGED
#   describe_repositories:
#     client: ecr
#     depends_on:
#       - coinbase_repo.create_repository
#     args:
#       repositoryNames:
#         - coinbase
#   create_repository:
#     client: ecr
#     args:
#       repositoryName: coinbase

# # Lambdas
# pacemaker:
#   get_function:
#     client: lambda
#     depends_on:
#       - pacemaker.create_function
#     args:
#       FunctionName: COINBASE_pacemaker
#   create_function:
#     client: lambda
#     depends_on:
#       - coinbase_role.get_role
#       - coinbase_repo.describe_images
#       - coinbase_image.push
#     args:
#       Timeout: 30
#       MemorySize: 128
#       FunctionName: COINBASE_pacemaker
#       Role: $(coinbase_role.get_role.Role.Arn)
#       PackageType: Image
#       ImageConfig:
#         Command:
#           - src/index.handler
#       Code:
#         ImageUri: >-
#           718734850255.dkr.ecr.us-west-2.amazonaws.com/coinbase@$(coinbase_repo.describe_images.imageDetails.0.imageDigest)
#   update_function_configuration:
#     client: lambda
#     depends_on:
#       - pacemaker.get_function
#       - coinbase_repo.describe_repositories
#     args:
#       FunctionName: COINBASE_pacemaker
#       Timeout: 60
#       MemorySize: 128
#       Environment:
#         Variables:
#           DEFAULT_ACCESS_KEY: $(os.environ.DEFAULT_ACCESS_KEY)
#           DEFAULT_B64_SECRET: $(os.environ.DEFAULT_B64_SECRET)
#           DEFAULT_PASSPHRASE: $(os.environ.DEFAULT_PASSPHRASE)

#           WORKER0_ACCESS_KEY: $(os.environ.WORKER0_ACCESS_KEY)
#           WORKER0_B64_SECRET: $(os.environ.WORKER0_B64_SECRET)
#           WORKER0_PASSPHRASE: $(os.environ.WORKER0_PASSPHRASE)

#           WORKER1_ACCESS_KEY: $(os.environ.WORKER1_ACCESS_KEY)
#           WORKER1_B64_SECRET: $(os.environ.WORKER1_B64_SECRET)
#           WORKER1_PASSPHRASE: $(os.environ.WORKER1_PASSPHRASE)

#           WORKER2_ACCESS_KEY: $(os.environ.WORKER2_ACCESS_KEY)
#           WORKER2_B64_SECRET: $(os.environ.WORKER2_B64_SECRET)
#           WORKER2_PASSPHRASE: $(os.environ.WORKER2_PASSPHRASE)

#           WORKER3_ACCESS_KEY: $(os.environ.WORKER3_ACCESS_KEY)
#           WORKER3_B64_SECRET: $(os.environ.WORKER3_B64_SECRET)
#           WORKER3_PASSPHRASE: $(os.environ.WORKER3_PASSPHRASE)

#           WORKER4_ACCESS_KEY: $(os.environ.WORKER4_ACCESS_KEY)
#           WORKER4_B64_SECRET: $(os.environ.WORKER4_B64_SECRET)
#           WORKER4_PASSPHRASE: $(os.environ.WORKER4_PASSPHRASE)

#           WORKER5_ACCESS_KEY: $(os.environ.WORKER5_ACCESS_KEY)
#           WORKER5_B64_SECRET: $(os.environ.WORKER5_B64_SECRET)
#           WORKER5_PASSPHRASE: $(os.environ.WORKER5_PASSPHRASE)

#           WORKER6_ACCESS_KEY: $(os.environ.WORKER6_ACCESS_KEY)
#           WORKER6_B64_SECRET: $(os.environ.WORKER6_B64_SECRET)
#           WORKER6_PASSPHRASE: $(os.environ.WORKER6_PASSPHRASE)

#           WORKER7_ACCESS_KEY: $(os.environ.WORKER7_ACCESS_KEY)
#           WORKER7_B64_SECRET: $(os.environ.WORKER7_B64_SECRET)
#           WORKER7_PASSPHRASE: $(os.environ.WORKER7_PASSPHRASE)

#           WORKER8_ACCESS_KEY: $(os.environ.WORKER8_ACCESS_KEY)
#           WORKER8_B64_SECRET: $(os.environ.WORKER8_B64_SECRET)
#           WORKER8_PASSPHRASE: $(os.environ.WORKER8_PASSPHRASE)
#       ImageConfig:
#         Command:
#           - src/index.handler
#   update_function_code:
#     client: lambda
#     depends_on:
#       - pacemaker.get_function
#       - pacemaker.update_function_configuration
#       - coinbase_repo.describe_repositories
#     args:
#       FunctionName: COINBASE_pacemaker
#       ImageUri: >-
#         718734850255.dkr.ecr.us-west-2.amazonaws.com/coinbase@$(coinbase_repo.describe_images.imageDetails.0.imageDigest)
#   add_permission:
#     client: lambda
#     depends_on:
#       - every_fifteen.describe_rule
#     args:
#       FunctionName: COINBASE_pacemaker
#       SourceArn: $(every_fifteen.describe_rule.Arn)
#       StatementId: $(every_fifteen.describe_rule.Name)
#       Action: lambda:InvokeFunction
#       Principal: events.amazonaws.com

# # Events
# every_fifteen:
#   describe_rule:
#     client: events
#     depends_on:
#       - every_fifteen.put_rule
#     args:
#       Name: every_fifteen
#   put_rule:
#     client: events
#     args:
#       Name: every_fifteen
#       ScheduleExpression: rate(15 minutes)
#       Description: Run tasks every 15 minutes
#   put_targets:
#     client: events
#     depends_on:
#       - pacemaker.get_function
#     args:
#       Rule: every_fifteen
#       Targets:
#         - Id: COINBASE_pacemaker
#           Arn: $(pacemaker.get_function.Configuration.FunctionArn)

# # Docker
# coinbase_image:
#   get_ecr_password:
#     client: deployment
#   get_root:
#     client: deployment
#   build:
#     client: docker.images
#     depends_on:
#       - coinbase_image.get_root
#     args:
#       tag: coinbase
#       path: $(coinbase_image.get_root)
#       dockerfile: Dockerfile
#   tag:
#     client: coinbase_image.build.0
#     depends_on:
#       - coinbase_image.build
#       - coinbase_repo.describe_repositories
#     args:
#       repository: 718734850255.dkr.ecr.us-west-2.amazonaws.com/coinbase
#       tag: coinbase
#   push:
#     client: docker.images
#     depends_on:
#       - coinbase_image.get_ecr_password
#       - coinbase_image.build
#       - coinbase_image.tag
#     args:
#       repository: 718734850255.dkr.ecr.us-west-2.amazonaws.com/coinbase
#       tag: coinbase
#       auth_config:
#         username: AWS
#         password: $(coinbase_image.get_ecr_password)
